// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Tracer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tracer {

  /// <summary>Holder for reflection information generated from Tracer.proto</summary>
  public static partial class TracerReflection {

    #region Descriptor
    /// <summary>File descriptor for Tracer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxUcmFjZXIucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiI6Cg5DcmVhdGVJdGVt",
            "RGF0YRIRCglpc19mb2xkZXIYASABKAgSFQoNbmV3X2ZpbGVfcGF0aBgCIAEo",
            "CSI6Cg5EZWxldGVJdGVtRGF0YRIVCg1wcmV2aW91c19kYXRhGAEgASgJEhEK",
            "CWlzX2ZvbGRlchgCIAEoCCJfCg5Nb2RpZnlGaWxlRGF0YRIUCgxvZmZzZXRf",
            "c3RhcnQYASABKA0SEgoKb2Zmc2V0X2VuZBgCIAEoDRIMCgRkYXRhGAMgASgJ",
            "EhUKDXByZXZpb3VzX2RhdGEYBCABKAkiJwoOU2VsZWN0RmlsZURhdGESFQoN",
            "bmV3X2ZpbGVfcGF0aBgBIAEoCSJAChRDdXJzb3JDaGFuZ2VGaWxlRGF0YRIU",
            "CgxvZmZzZXRfc3RhcnQYASABKA0SEgoKb2Zmc2V0X2VuZBgCIAEoDSJRCg5S",
            "ZW5hbWVJdGVtRGF0YRIVCg1uZXdfZmlsZV9wYXRoGAEgASgJEhUKDXByZXZp",
            "b3VzX2RhdGEYAiABKAkSEQoJaXNfZm9sZGVyGAMgASgIItkEChBUcmFjZVRy",
            "YW5zYWN0aW9uEkQKBHR5cGUYASABKA4yNi5nb29nbGUucHJvdG9idWYuVHJh",
            "Y2VUcmFuc2FjdGlvbi5UcmFjZVRyYW5zYWN0aW9uVHlwZRIWCg50aW1lX29m",
            "ZnNldF9tcxgCIAEoDRIRCglmaWxlX3BhdGgYAyABKAkSNgoLY3JlYXRlX2Zp",
            "bGUYBCABKAsyHy5nb29nbGUucHJvdG9idWYuQ3JlYXRlSXRlbURhdGFIABI2",
            "CgtkZWxldGVfZmlsZRgFIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5EZWxldGVJ",
            "dGVtRGF0YUgAEjYKC21vZGlmeV9maWxlGAYgASgLMh8uZ29vZ2xlLnByb3Rv",
            "YnVmLk1vZGlmeUZpbGVEYXRhSAASNgoLc2VsZWN0X2ZpbGUYByABKAsyHy5n",
            "b29nbGUucHJvdG9idWYuU2VsZWN0RmlsZURhdGFIABI8CgtjdXJzb3JfZmls",
            "ZRgIIAEoCzIlLmdvb2dsZS5wcm90b2J1Zi5DdXJzb3JDaGFuZ2VGaWxlRGF0",
            "YUgAEjYKC3JlbmFtZV9maWxlGAkgASgLMh8uZ29vZ2xlLnByb3RvYnVmLlJl",
            "bmFtZUl0ZW1EYXRhSAAidgoUVHJhY2VUcmFuc2FjdGlvblR5cGUSDgoKQ3Jl",
            "YXRlRmlsZRAAEg4KCkRlbGV0ZUZpbGUQARIOCgpNb2RpZnlGaWxlEAISDgoK",
            "U2VsZWN0RmlsZRADEg4KCkN1cnNvckZpbGUQBBIOCgpSZW5hbWVGaWxlEAVC",
            "BgoEZGF0YSJhChNUcmFjZVRyYW5zYWN0aW9uTG9nEhEKCXBhcnRpdGlvbhgB",
            "IAEoDRI3Cgx0cmFuc2FjdGlvbnMYAiADKAsyIS5nb29nbGUucHJvdG9idWYu",
            "VHJhY2VUcmFuc2FjdGlvbiJKChRUcmFjZVRyYW5zYWN0aW9uTG9ncxIyCgRs",
            "b2dzGAEgAygLMiQuZ29vZ2xlLnByb3RvYnVmLlRyYWNlVHJhbnNhY3Rpb25M",
            "b2ciRAoMVHJhY2VQcm9qZWN0EgoKAmlkGAEgASgJEhAKCGR1cmF0aW9uGAIg",
            "ASgNEhYKDnBhcnRpdGlvbl9zaXplGAMgASgNQgmqAgZUcmFjZXJiBnByb3Rv",
            "Mw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.CreateItemData), global::Tracer.CreateItemData.Parser, new[]{ "IsFolder", "NewFilePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.DeleteItemData), global::Tracer.DeleteItemData.Parser, new[]{ "PreviousData", "IsFolder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.ModifyFileData), global::Tracer.ModifyFileData.Parser, new[]{ "OffsetStart", "OffsetEnd", "Data", "PreviousData" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.SelectFileData), global::Tracer.SelectFileData.Parser, new[]{ "NewFilePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.CursorChangeFileData), global::Tracer.CursorChangeFileData.Parser, new[]{ "OffsetStart", "OffsetEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.RenameItemData), global::Tracer.RenameItemData.Parser, new[]{ "NewFilePath", "PreviousData", "IsFolder" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransaction), global::Tracer.TraceTransaction.Parser, new[]{ "Type", "TimeOffsetMs", "FilePath", "CreateFile", "DeleteFile", "ModifyFile", "SelectFile", "CursorFile", "RenameFile" }, new[]{ "Data" }, new[]{ typeof(global::Tracer.TraceTransaction.Types.TraceTransactionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransactionLog), global::Tracer.TraceTransactionLog.Parser, new[]{ "Partition", "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransactionLogs), global::Tracer.TraceTransactionLogs.Parser, new[]{ "Logs" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceProject), global::Tracer.TraceProject.Parser, new[]{ "Id", "Duration", "PartitionSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Data
  /// </summary>
  public sealed partial class CreateItemData : pb::IMessage<CreateItemData> {
    private static readonly pb::MessageParser<CreateItemData> _parser = new pb::MessageParser<CreateItemData>(() => new CreateItemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateItemData(CreateItemData other) : this() {
      isFolder_ = other.isFolder_;
      newFilePath_ = other.newFilePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateItemData Clone() {
      return new CreateItemData(this);
    }

    /// <summary>Field number for the "is_folder" field.</summary>
    public const int IsFolderFieldNumber = 1;
    private bool isFolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFolder {
      get { return isFolder_; }
      set {
        isFolder_ = value;
      }
    }

    /// <summary>Field number for the "new_file_path" field.</summary>
    public const int NewFilePathFieldNumber = 2;
    private string newFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewFilePath {
      get { return newFilePath_; }
      set {
        newFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (IsFolder != other.IsFolder) return false;
      if (NewFilePath != other.NewFilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (IsFolder != false) hash ^= IsFolder.GetHashCode();
      if (NewFilePath.Length != 0) hash ^= NewFilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (IsFolder != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsFolder);
      }
      if (NewFilePath.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(NewFilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (IsFolder != false) {
        size += 1 + 1;
      }
      if (NewFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewFilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateItemData other) {
      if (other == null) {
        return;
      }
      if (other.IsFolder != false) {
        IsFolder = other.IsFolder;
      }
      if (other.NewFilePath.Length != 0) {
        NewFilePath = other.NewFilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            IsFolder = input.ReadBool();
            break;
          }
          case 18: {
            NewFilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class DeleteItemData : pb::IMessage<DeleteItemData> {
    private static readonly pb::MessageParser<DeleteItemData> _parser = new pb::MessageParser<DeleteItemData>(() => new DeleteItemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemData(DeleteItemData other) : this() {
      previousData_ = other.previousData_;
      isFolder_ = other.isFolder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteItemData Clone() {
      return new DeleteItemData(this);
    }

    /// <summary>Field number for the "previous_data" field.</summary>
    public const int PreviousDataFieldNumber = 1;
    private string previousData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousData {
      get { return previousData_; }
      set {
        previousData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_folder" field.</summary>
    public const int IsFolderFieldNumber = 2;
    private bool isFolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFolder {
      get { return isFolder_; }
      set {
        isFolder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (PreviousData != other.PreviousData) return false;
      if (IsFolder != other.IsFolder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (PreviousData.Length != 0) hash ^= PreviousData.GetHashCode();
      if (IsFolder != false) hash ^= IsFolder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (PreviousData.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(PreviousData);
      }
      if (IsFolder != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsFolder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (PreviousData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousData);
      }
      if (IsFolder != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteItemData other) {
      if (other == null) {
        return;
      }
      if (other.PreviousData.Length != 0) {
        PreviousData = other.PreviousData;
      }
      if (other.IsFolder != false) {
        IsFolder = other.IsFolder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            PreviousData = input.ReadString();
            break;
          }
          case 16: {
            IsFolder = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class ModifyFileData : pb::IMessage<ModifyFileData> {
    private static readonly pb::MessageParser<ModifyFileData> _parser = new pb::MessageParser<ModifyFileData>(() => new ModifyFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData(ModifyFileData other) : this() {
      offsetStart_ = other.offsetStart_;
      offsetEnd_ = other.offsetEnd_;
      data_ = other.data_;
      previousData_ = other.previousData_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData Clone() {
      return new ModifyFileData(this);
    }

    /// <summary>Field number for the "offset_start" field.</summary>
    public const int OffsetStartFieldNumber = 1;
    private uint offsetStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetStart {
      get { return offsetStart_; }
      set {
        offsetStart_ = value;
      }
    }

    /// <summary>Field number for the "offset_end" field.</summary>
    public const int OffsetEndFieldNumber = 2;
    private uint offsetEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetEnd {
      get { return offsetEnd_; }
      set {
        offsetEnd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_data" field.</summary>
    public const int PreviousDataFieldNumber = 4;
    private string previousData_ = "";
    /// <summary>
    ///Data to undo a replace
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousData {
      get { return previousData_; }
      set {
        previousData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetStart != other.OffsetStart) return false;
      if (OffsetEnd != other.OffsetEnd) return false;
      if (Data != other.Data) return false;
      if (PreviousData != other.PreviousData) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetStart != 0) hash ^= OffsetStart.GetHashCode();
      if (OffsetEnd != 0) hash ^= OffsetEnd.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (PreviousData.Length != 0) hash ^= PreviousData.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetStart != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetStart);
      }
      if (OffsetEnd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetEnd);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (PreviousData.Length != 0) {
        output.WriteRawTag(34);
        output.WriteString(PreviousData);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetStart);
      }
      if (OffsetEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetEnd);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (PreviousData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousData);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyFileData other) {
      if (other == null) {
        return;
      }
      if (other.OffsetStart != 0) {
        OffsetStart = other.OffsetStart;
      }
      if (other.OffsetEnd != 0) {
        OffsetEnd = other.OffsetEnd;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      if (other.PreviousData.Length != 0) {
        PreviousData = other.PreviousData;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OffsetStart = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetEnd = input.ReadUInt32();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
          case 34: {
            PreviousData = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectFileData : pb::IMessage<SelectFileData> {
    private static readonly pb::MessageParser<SelectFileData> _parser = new pb::MessageParser<SelectFileData>(() => new SelectFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData(SelectFileData other) : this() {
      newFilePath_ = other.newFilePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData Clone() {
      return new SelectFileData(this);
    }

    /// <summary>Field number for the "new_file_path" field.</summary>
    public const int NewFilePathFieldNumber = 1;
    private string newFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewFilePath {
      get { return newFilePath_; }
      set {
        newFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewFilePath != other.NewFilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewFilePath.Length != 0) hash ^= NewFilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewFilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewFilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewFilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectFileData other) {
      if (other == null) {
        return;
      }
      if (other.NewFilePath.Length != 0) {
        NewFilePath = other.NewFilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewFilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class CursorChangeFileData : pb::IMessage<CursorChangeFileData> {
    private static readonly pb::MessageParser<CursorChangeFileData> _parser = new pb::MessageParser<CursorChangeFileData>(() => new CursorChangeFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CursorChangeFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData(CursorChangeFileData other) : this() {
      offsetStart_ = other.offsetStart_;
      offsetEnd_ = other.offsetEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData Clone() {
      return new CursorChangeFileData(this);
    }

    /// <summary>Field number for the "offset_start" field.</summary>
    public const int OffsetStartFieldNumber = 1;
    private uint offsetStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetStart {
      get { return offsetStart_; }
      set {
        offsetStart_ = value;
      }
    }

    /// <summary>Field number for the "offset_end" field.</summary>
    public const int OffsetEndFieldNumber = 2;
    private uint offsetEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetEnd {
      get { return offsetEnd_; }
      set {
        offsetEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CursorChangeFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CursorChangeFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetStart != other.OffsetStart) return false;
      if (OffsetEnd != other.OffsetEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetStart != 0) hash ^= OffsetStart.GetHashCode();
      if (OffsetEnd != 0) hash ^= OffsetEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetStart != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetStart);
      }
      if (OffsetEnd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetStart);
      }
      if (OffsetEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CursorChangeFileData other) {
      if (other == null) {
        return;
      }
      if (other.OffsetStart != 0) {
        OffsetStart = other.OffsetStart;
      }
      if (other.OffsetEnd != 0) {
        OffsetEnd = other.OffsetEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OffsetStart = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetEnd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenameItemData : pb::IMessage<RenameItemData> {
    private static readonly pb::MessageParser<RenameItemData> _parser = new pb::MessageParser<RenameItemData>(() => new RenameItemData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameItemData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameItemData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameItemData(RenameItemData other) : this() {
      newFilePath_ = other.newFilePath_;
      previousData_ = other.previousData_;
      isFolder_ = other.isFolder_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameItemData Clone() {
      return new RenameItemData(this);
    }

    /// <summary>Field number for the "new_file_path" field.</summary>
    public const int NewFilePathFieldNumber = 1;
    private string newFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewFilePath {
      get { return newFilePath_; }
      set {
        newFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "previous_data" field.</summary>
    public const int PreviousDataFieldNumber = 2;
    private string previousData_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string PreviousData {
      get { return previousData_; }
      set {
        previousData_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "is_folder" field.</summary>
    public const int IsFolderFieldNumber = 3;
    private bool isFolder_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool IsFolder {
      get { return isFolder_; }
      set {
        isFolder_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameItemData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameItemData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewFilePath != other.NewFilePath) return false;
      if (PreviousData != other.PreviousData) return false;
      if (IsFolder != other.IsFolder) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewFilePath.Length != 0) hash ^= NewFilePath.GetHashCode();
      if (PreviousData.Length != 0) hash ^= PreviousData.GetHashCode();
      if (IsFolder != false) hash ^= IsFolder.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewFilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewFilePath);
      }
      if (PreviousData.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(PreviousData);
      }
      if (IsFolder != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsFolder);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewFilePath);
      }
      if (PreviousData.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PreviousData);
      }
      if (IsFolder != false) {
        size += 1 + 1;
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameItemData other) {
      if (other == null) {
        return;
      }
      if (other.NewFilePath.Length != 0) {
        NewFilePath = other.NewFilePath;
      }
      if (other.PreviousData.Length != 0) {
        PreviousData = other.PreviousData;
      }
      if (other.IsFolder != false) {
        IsFolder = other.IsFolder;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewFilePath = input.ReadString();
            break;
          }
          case 18: {
            PreviousData = input.ReadString();
            break;
          }
          case 24: {
            IsFolder = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceTransaction : pb::IMessage<TraceTransaction> {
    private static readonly pb::MessageParser<TraceTransaction> _parser = new pb::MessageParser<TraceTransaction>(() => new TraceTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction(TraceTransaction other) : this() {
      type_ = other.type_;
      timeOffsetMs_ = other.timeOffsetMs_;
      filePath_ = other.filePath_;
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          CreateFile = other.CreateFile.Clone();
          break;
        case DataOneofCase.DeleteFile:
          DeleteFile = other.DeleteFile.Clone();
          break;
        case DataOneofCase.ModifyFile:
          ModifyFile = other.ModifyFile.Clone();
          break;
        case DataOneofCase.SelectFile:
          SelectFile = other.SelectFile.Clone();
          break;
        case DataOneofCase.CursorFile:
          CursorFile = other.CursorFile.Clone();
          break;
        case DataOneofCase.RenameFile:
          RenameFile = other.RenameFile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction Clone() {
      return new TraceTransaction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tracer.TraceTransaction.Types.TraceTransactionType type_ = global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.TraceTransaction.Types.TraceTransactionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "time_offset_ms" field.</summary>
    public const int TimeOffsetMsFieldNumber = 2;
    private uint timeOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeOffsetMs {
      get { return timeOffsetMs_; }
      set {
        timeOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 3;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_file" field.</summary>
    public const int CreateFileFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.CreateItemData CreateFile {
      get { return dataCase_ == DataOneofCase.CreateFile ? (global::Tracer.CreateItemData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CreateFile;
      }
    }

    /// <summary>Field number for the "delete_file" field.</summary>
    public const int DeleteFileFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.DeleteItemData DeleteFile {
      get { return dataCase_ == DataOneofCase.DeleteFile ? (global::Tracer.DeleteItemData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeleteFile;
      }
    }

    /// <summary>Field number for the "modify_file" field.</summary>
    public const int ModifyFileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.ModifyFileData ModifyFile {
      get { return dataCase_ == DataOneofCase.ModifyFile ? (global::Tracer.ModifyFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ModifyFile;
      }
    }

    /// <summary>Field number for the "select_file" field.</summary>
    public const int SelectFileFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.SelectFileData SelectFile {
      get { return dataCase_ == DataOneofCase.SelectFile ? (global::Tracer.SelectFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.SelectFile;
      }
    }

    /// <summary>Field number for the "cursor_file" field.</summary>
    public const int CursorFileFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.CursorChangeFileData CursorFile {
      get { return dataCase_ == DataOneofCase.CursorFile ? (global::Tracer.CursorChangeFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CursorFile;
      }
    }

    /// <summary>Field number for the "rename_file" field.</summary>
    public const int RenameFileFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.RenameItemData RenameFile {
      get { return dataCase_ == DataOneofCase.RenameFile ? (global::Tracer.RenameItemData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.RenameFile;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      CreateFile = 4,
      DeleteFile = 5,
      ModifyFile = 6,
      SelectFile = 7,
      CursorFile = 8,
      RenameFile = 9,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TimeOffsetMs != other.TimeOffsetMs) return false;
      if (FilePath != other.FilePath) return false;
      if (!object.Equals(CreateFile, other.CreateFile)) return false;
      if (!object.Equals(DeleteFile, other.DeleteFile)) return false;
      if (!object.Equals(ModifyFile, other.ModifyFile)) return false;
      if (!object.Equals(SelectFile, other.SelectFile)) return false;
      if (!object.Equals(CursorFile, other.CursorFile)) return false;
      if (!object.Equals(RenameFile, other.RenameFile)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) hash ^= Type.GetHashCode();
      if (TimeOffsetMs != 0) hash ^= TimeOffsetMs.GetHashCode();
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (dataCase_ == DataOneofCase.CreateFile) hash ^= CreateFile.GetHashCode();
      if (dataCase_ == DataOneofCase.DeleteFile) hash ^= DeleteFile.GetHashCode();
      if (dataCase_ == DataOneofCase.ModifyFile) hash ^= ModifyFile.GetHashCode();
      if (dataCase_ == DataOneofCase.SelectFile) hash ^= SelectFile.GetHashCode();
      if (dataCase_ == DataOneofCase.CursorFile) hash ^= CursorFile.GetHashCode();
      if (dataCase_ == DataOneofCase.RenameFile) hash ^= RenameFile.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TimeOffsetMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeOffsetMs);
      }
      if (FilePath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FilePath);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        output.WriteRawTag(42);
        output.WriteMessage(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.ModifyFile) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyFile);
      }
      if (dataCase_ == DataOneofCase.SelectFile) {
        output.WriteRawTag(58);
        output.WriteMessage(SelectFile);
      }
      if (dataCase_ == DataOneofCase.CursorFile) {
        output.WriteRawTag(66);
        output.WriteMessage(CursorFile);
      }
      if (dataCase_ == DataOneofCase.RenameFile) {
        output.WriteRawTag(74);
        output.WriteMessage(RenameFile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TimeOffsetMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeOffsetMs);
      }
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.ModifyFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyFile);
      }
      if (dataCase_ == DataOneofCase.SelectFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectFile);
      }
      if (dataCase_ == DataOneofCase.CursorFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CursorFile);
      }
      if (dataCase_ == DataOneofCase.RenameFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenameFile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        Type = other.Type;
      }
      if (other.TimeOffsetMs != 0) {
        TimeOffsetMs = other.TimeOffsetMs;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          if (CreateFile == null) {
            CreateFile = new global::Tracer.CreateItemData();
          }
          CreateFile.MergeFrom(other.CreateFile);
          break;
        case DataOneofCase.DeleteFile:
          if (DeleteFile == null) {
            DeleteFile = new global::Tracer.DeleteItemData();
          }
          DeleteFile.MergeFrom(other.DeleteFile);
          break;
        case DataOneofCase.ModifyFile:
          if (ModifyFile == null) {
            ModifyFile = new global::Tracer.ModifyFileData();
          }
          ModifyFile.MergeFrom(other.ModifyFile);
          break;
        case DataOneofCase.SelectFile:
          if (SelectFile == null) {
            SelectFile = new global::Tracer.SelectFileData();
          }
          SelectFile.MergeFrom(other.SelectFile);
          break;
        case DataOneofCase.CursorFile:
          if (CursorFile == null) {
            CursorFile = new global::Tracer.CursorChangeFileData();
          }
          CursorFile.MergeFrom(other.CursorFile);
          break;
        case DataOneofCase.RenameFile:
          if (RenameFile == null) {
            RenameFile = new global::Tracer.RenameItemData();
          }
          RenameFile.MergeFrom(other.RenameFile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tracer.TraceTransaction.Types.TraceTransactionType) input.ReadEnum();
            break;
          }
          case 16: {
            TimeOffsetMs = input.ReadUInt32();
            break;
          }
          case 26: {
            FilePath = input.ReadString();
            break;
          }
          case 34: {
            global::Tracer.CreateItemData subBuilder = new global::Tracer.CreateItemData();
            if (dataCase_ == DataOneofCase.CreateFile) {
              subBuilder.MergeFrom(CreateFile);
            }
            input.ReadMessage(subBuilder);
            CreateFile = subBuilder;
            break;
          }
          case 42: {
            global::Tracer.DeleteItemData subBuilder = new global::Tracer.DeleteItemData();
            if (dataCase_ == DataOneofCase.DeleteFile) {
              subBuilder.MergeFrom(DeleteFile);
            }
            input.ReadMessage(subBuilder);
            DeleteFile = subBuilder;
            break;
          }
          case 50: {
            global::Tracer.ModifyFileData subBuilder = new global::Tracer.ModifyFileData();
            if (dataCase_ == DataOneofCase.ModifyFile) {
              subBuilder.MergeFrom(ModifyFile);
            }
            input.ReadMessage(subBuilder);
            ModifyFile = subBuilder;
            break;
          }
          case 58: {
            global::Tracer.SelectFileData subBuilder = new global::Tracer.SelectFileData();
            if (dataCase_ == DataOneofCase.SelectFile) {
              subBuilder.MergeFrom(SelectFile);
            }
            input.ReadMessage(subBuilder);
            SelectFile = subBuilder;
            break;
          }
          case 66: {
            global::Tracer.CursorChangeFileData subBuilder = new global::Tracer.CursorChangeFileData();
            if (dataCase_ == DataOneofCase.CursorFile) {
              subBuilder.MergeFrom(CursorFile);
            }
            input.ReadMessage(subBuilder);
            CursorFile = subBuilder;
            break;
          }
          case 74: {
            global::Tracer.RenameItemData subBuilder = new global::Tracer.RenameItemData();
            if (dataCase_ == DataOneofCase.RenameFile) {
              subBuilder.MergeFrom(RenameFile);
            }
            input.ReadMessage(subBuilder);
            RenameFile = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TraceTransaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TraceTransactionType {
        [pbr::OriginalName("CreateFile")] CreateFile = 0,
        [pbr::OriginalName("DeleteFile")] DeleteFile = 1,
        [pbr::OriginalName("ModifyFile")] ModifyFile = 2,
        [pbr::OriginalName("SelectFile")] SelectFile = 3,
        [pbr::OriginalName("CursorFile")] CursorFile = 4,
        [pbr::OriginalName("RenameFile")] RenameFile = 5,
      }

    }
    #endregion

  }

  public sealed partial class TraceTransactionLog : pb::IMessage<TraceTransactionLog> {
    private static readonly pb::MessageParser<TraceTransactionLog> _parser = new pb::MessageParser<TraceTransactionLog>(() => new TraceTransactionLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransactionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog(TraceTransactionLog other) : this() {
      partition_ = other.partition_;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog Clone() {
      return new TraceTransactionLog(this);
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 1;
    private uint partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partition {
      get { return partition_; }
      set {
        partition_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tracer.TraceTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::Tracer.TraceTransaction.Parser);
    private readonly pbc::RepeatedField<global::Tracer.TraceTransaction> transactions_ = new pbc::RepeatedField<global::Tracer.TraceTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tracer.TraceTransaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransactionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransactionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partition != other.Partition) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partition != 0) hash ^= Partition.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partition);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partition);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransactionLog other) {
      if (other == null) {
        return;
      }
      if (other.Partition != 0) {
        Partition = other.Partition;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Partition = input.ReadUInt32();
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceTransactionLogs : pb::IMessage<TraceTransactionLogs> {
    private static readonly pb::MessageParser<TraceTransactionLogs> _parser = new pb::MessageParser<TraceTransactionLogs>(() => new TraceTransactionLogs());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransactionLogs> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLogs() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLogs(TraceTransactionLogs other) : this() {
      logs_ = other.logs_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLogs Clone() {
      return new TraceTransactionLogs(this);
    }

    /// <summary>Field number for the "logs" field.</summary>
    public const int LogsFieldNumber = 1;
    private static readonly pb::FieldCodec<global::Tracer.TraceTransactionLog> _repeated_logs_codec
        = pb::FieldCodec.ForMessage(10, global::Tracer.TraceTransactionLog.Parser);
    private readonly pbc::RepeatedField<global::Tracer.TraceTransactionLog> logs_ = new pbc::RepeatedField<global::Tracer.TraceTransactionLog>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tracer.TraceTransactionLog> Logs {
      get { return logs_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransactionLogs);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransactionLogs other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!logs_.Equals(other.logs_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      hash ^= logs_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      logs_.WriteTo(output, _repeated_logs_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      size += logs_.CalculateSize(_repeated_logs_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransactionLogs other) {
      if (other == null) {
        return;
      }
      logs_.Add(other.logs_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            logs_.AddEntriesFrom(input, _repeated_logs_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceProject : pb::IMessage<TraceProject> {
    private static readonly pb::MessageParser<TraceProject> _parser = new pb::MessageParser<TraceProject>(() => new TraceProject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceProject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[9]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject(TraceProject other) : this() {
      id_ = other.id_;
      duration_ = other.duration_;
      partitionSize_ = other.partitionSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject Clone() {
      return new TraceProject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "partition_size" field.</summary>
    public const int PartitionSizeFieldNumber = 3;
    private uint partitionSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartitionSize {
      get { return partitionSize_; }
      set {
        partitionSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceProject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceProject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Duration != other.Duration) return false;
      if (PartitionSize != other.PartitionSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (PartitionSize != 0) hash ^= PartitionSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (PartitionSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PartitionSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (PartitionSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartitionSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceProject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.PartitionSize != 0) {
        PartitionSize = other.PartitionSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            PartitionSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
