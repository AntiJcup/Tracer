// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: Tracer.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Tracer {

  /// <summary>Holder for reflection information generated from Tracer.proto</summary>
  public static partial class TracerReflection {

    #region Descriptor
    /// <summary>File descriptor for Tracer.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static TracerReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "CgxUcmFjZXIucHJvdG8SD2dvb2dsZS5wcm90b2J1ZiIQCg5DcmVhdGVGaWxl",
            "RGF0YSIQCg5EZWxldGVGaWxlRGF0YSJICg5Nb2RpZnlGaWxlRGF0YRIUCgxv",
            "ZmZzZXRfc3RhcnQYASABKA0SEgoKb2Zmc2V0X2VuZBgCIAEoDRIMCgRkYXRh",
            "GAMgASgJIhAKDlNlbGVjdEZpbGVEYXRhIkAKFEN1cnNvckNoYW5nZUZpbGVE",
            "YXRhEhQKDG9mZnNldF9zdGFydBgBIAEoDRISCgpvZmZzZXRfZW5kGAIgASgN",
            "IicKDlJlbmFtZUZpbGVEYXRhEhUKDW5ld19maWxlX3BhdGgYASABKAki2QQK",
            "EFRyYWNlVHJhbnNhY3Rpb24SRAoEdHlwZRgBIAEoDjI2Lmdvb2dsZS5wcm90",
            "b2J1Zi5UcmFjZVRyYW5zYWN0aW9uLlRyYWNlVHJhbnNhY3Rpb25UeXBlEhYK",
            "DnRpbWVfb2Zmc2V0X21zGAIgASgNEhEKCWZpbGVfcGF0aBgDIAEoCRI2Cgtj",
            "cmVhdGVfZmlsZRgEIAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5DcmVhdGVGaWxl",
            "RGF0YUgAEjYKC2RlbGV0ZV9maWxlGAUgASgLMh8uZ29vZ2xlLnByb3RvYnVm",
            "LkRlbGV0ZUZpbGVEYXRhSAASNgoLbW9kaWZ5X2ZpbGUYBiABKAsyHy5nb29n",
            "bGUucHJvdG9idWYuTW9kaWZ5RmlsZURhdGFIABI2CgtzZWxlY3RfZmlsZRgH",
            "IAEoCzIfLmdvb2dsZS5wcm90b2J1Zi5TZWxlY3RGaWxlRGF0YUgAEjwKC2N1",
            "cnNvcl9maWxlGAggASgLMiUuZ29vZ2xlLnByb3RvYnVmLkN1cnNvckNoYW5n",
            "ZUZpbGVEYXRhSAASNgoLcmVuYW1lX2ZpbGUYCSABKAsyHy5nb29nbGUucHJv",
            "dG9idWYuUmVuYW1lRmlsZURhdGFIACJ2ChRUcmFjZVRyYW5zYWN0aW9uVHlw",
            "ZRIOCgpDcmVhdGVGaWxlEAASDgoKRGVsZXRlRmlsZRABEg4KCk1vZGlmeUZp",
            "bGUQAhIOCgpTZWxlY3RGaWxlEAMSDgoKQ3Vyc29yRmlsZRAEEg4KClJlbmFt",
            "ZUZpbGUQBUIGCgRkYXRhImEKE1RyYWNlVHJhbnNhY3Rpb25Mb2cSEQoJcGFy",
            "dGl0aW9uGAEgASgNEjcKDHRyYW5zYWN0aW9ucxgCIAMoCzIhLmdvb2dsZS5w",
            "cm90b2J1Zi5UcmFjZVRyYW5zYWN0aW9uIkQKDFRyYWNlUHJvamVjdBIKCgJp",
            "ZBgBIAEoCRIQCghkdXJhdGlvbhgCIAEoDRIWCg5wYXJ0aXRpb25fc2l6ZRgD",
            "IAEoDUIJqgIGVHJhY2VyYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(null, null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.CreateFileData), global::Tracer.CreateFileData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.DeleteFileData), global::Tracer.DeleteFileData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.ModifyFileData), global::Tracer.ModifyFileData.Parser, new[]{ "OffsetStart", "OffsetEnd", "Data" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.SelectFileData), global::Tracer.SelectFileData.Parser, null, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.CursorChangeFileData), global::Tracer.CursorChangeFileData.Parser, new[]{ "OffsetStart", "OffsetEnd" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.RenameFileData), global::Tracer.RenameFileData.Parser, new[]{ "NewFilePath" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransaction), global::Tracer.TraceTransaction.Parser, new[]{ "Type", "TimeOffsetMs", "FilePath", "CreateFile", "DeleteFile", "ModifyFile", "SelectFile", "CursorFile", "RenameFile" }, new[]{ "Data" }, new[]{ typeof(global::Tracer.TraceTransaction.Types.TraceTransactionType) }, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceTransactionLog), global::Tracer.TraceTransactionLog.Parser, new[]{ "Partition", "Transactions" }, null, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Tracer.TraceProject), global::Tracer.TraceProject.Parser, new[]{ "Id", "Duration", "PartitionSize" }, null, null, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  ///Data
  /// </summary>
  public sealed partial class CreateFileData : pb::IMessage<CreateFileData> {
    private static readonly pb::MessageParser<CreateFileData> _parser = new pb::MessageParser<CreateFileData>(() => new CreateFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CreateFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData(CreateFileData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CreateFileData Clone() {
      return new CreateFileData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CreateFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CreateFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CreateFileData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class DeleteFileData : pb::IMessage<DeleteFileData> {
    private static readonly pb::MessageParser<DeleteFileData> _parser = new pb::MessageParser<DeleteFileData>(() => new DeleteFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<DeleteFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData(DeleteFileData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DeleteFileData Clone() {
      return new DeleteFileData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as DeleteFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(DeleteFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(DeleteFileData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class ModifyFileData : pb::IMessage<ModifyFileData> {
    private static readonly pb::MessageParser<ModifyFileData> _parser = new pb::MessageParser<ModifyFileData>(() => new ModifyFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<ModifyFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[2]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData(ModifyFileData other) : this() {
      offsetStart_ = other.offsetStart_;
      offsetEnd_ = other.offsetEnd_;
      data_ = other.data_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ModifyFileData Clone() {
      return new ModifyFileData(this);
    }

    /// <summary>Field number for the "offset_start" field.</summary>
    public const int OffsetStartFieldNumber = 1;
    private uint offsetStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetStart {
      get { return offsetStart_; }
      set {
        offsetStart_ = value;
      }
    }

    /// <summary>Field number for the "offset_end" field.</summary>
    public const int OffsetEndFieldNumber = 2;
    private uint offsetEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetEnd {
      get { return offsetEnd_; }
      set {
        offsetEnd_ = value;
      }
    }

    /// <summary>Field number for the "data" field.</summary>
    public const int DataFieldNumber = 3;
    private string data_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Data {
      get { return data_; }
      set {
        data_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as ModifyFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(ModifyFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetStart != other.OffsetStart) return false;
      if (OffsetEnd != other.OffsetEnd) return false;
      if (Data != other.Data) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetStart != 0) hash ^= OffsetStart.GetHashCode();
      if (OffsetEnd != 0) hash ^= OffsetEnd.GetHashCode();
      if (Data.Length != 0) hash ^= Data.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetStart != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetStart);
      }
      if (OffsetEnd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetEnd);
      }
      if (Data.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Data);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetStart);
      }
      if (OffsetEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetEnd);
      }
      if (Data.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Data);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(ModifyFileData other) {
      if (other == null) {
        return;
      }
      if (other.OffsetStart != 0) {
        OffsetStart = other.OffsetStart;
      }
      if (other.OffsetEnd != 0) {
        OffsetEnd = other.OffsetEnd;
      }
      if (other.Data.Length != 0) {
        Data = other.Data;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OffsetStart = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetEnd = input.ReadUInt32();
            break;
          }
          case 26: {
            Data = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class SelectFileData : pb::IMessage<SelectFileData> {
    private static readonly pb::MessageParser<SelectFileData> _parser = new pb::MessageParser<SelectFileData>(() => new SelectFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SelectFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[3]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData(SelectFileData other) : this() {
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SelectFileData Clone() {
      return new SelectFileData(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SelectFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SelectFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SelectFileData other) {
      if (other == null) {
        return;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
        }
      }
    }

  }

  public sealed partial class CursorChangeFileData : pb::IMessage<CursorChangeFileData> {
    private static readonly pb::MessageParser<CursorChangeFileData> _parser = new pb::MessageParser<CursorChangeFileData>(() => new CursorChangeFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<CursorChangeFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[4]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData(CursorChangeFileData other) : this() {
      offsetStart_ = other.offsetStart_;
      offsetEnd_ = other.offsetEnd_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public CursorChangeFileData Clone() {
      return new CursorChangeFileData(this);
    }

    /// <summary>Field number for the "offset_start" field.</summary>
    public const int OffsetStartFieldNumber = 1;
    private uint offsetStart_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetStart {
      get { return offsetStart_; }
      set {
        offsetStart_ = value;
      }
    }

    /// <summary>Field number for the "offset_end" field.</summary>
    public const int OffsetEndFieldNumber = 2;
    private uint offsetEnd_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint OffsetEnd {
      get { return offsetEnd_; }
      set {
        offsetEnd_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as CursorChangeFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(CursorChangeFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (OffsetStart != other.OffsetStart) return false;
      if (OffsetEnd != other.OffsetEnd) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (OffsetStart != 0) hash ^= OffsetStart.GetHashCode();
      if (OffsetEnd != 0) hash ^= OffsetEnd.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (OffsetStart != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(OffsetStart);
      }
      if (OffsetEnd != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(OffsetEnd);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (OffsetStart != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetStart);
      }
      if (OffsetEnd != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(OffsetEnd);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(CursorChangeFileData other) {
      if (other == null) {
        return;
      }
      if (other.OffsetStart != 0) {
        OffsetStart = other.OffsetStart;
      }
      if (other.OffsetEnd != 0) {
        OffsetEnd = other.OffsetEnd;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            OffsetStart = input.ReadUInt32();
            break;
          }
          case 16: {
            OffsetEnd = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  public sealed partial class RenameFileData : pb::IMessage<RenameFileData> {
    private static readonly pb::MessageParser<RenameFileData> _parser = new pb::MessageParser<RenameFileData>(() => new RenameFileData());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RenameFileData> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[5]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameFileData() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameFileData(RenameFileData other) : this() {
      newFilePath_ = other.newFilePath_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RenameFileData Clone() {
      return new RenameFileData(this);
    }

    /// <summary>Field number for the "new_file_path" field.</summary>
    public const int NewFilePathFieldNumber = 1;
    private string newFilePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string NewFilePath {
      get { return newFilePath_; }
      set {
        newFilePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RenameFileData);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RenameFileData other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (NewFilePath != other.NewFilePath) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (NewFilePath.Length != 0) hash ^= NewFilePath.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (NewFilePath.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(NewFilePath);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (NewFilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(NewFilePath);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RenameFileData other) {
      if (other == null) {
        return;
      }
      if (other.NewFilePath.Length != 0) {
        NewFilePath = other.NewFilePath;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            NewFilePath = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceTransaction : pb::IMessage<TraceTransaction> {
    private static readonly pb::MessageParser<TraceTransaction> _parser = new pb::MessageParser<TraceTransaction>(() => new TraceTransaction());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransaction> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[6]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction(TraceTransaction other) : this() {
      type_ = other.type_;
      timeOffsetMs_ = other.timeOffsetMs_;
      filePath_ = other.filePath_;
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          CreateFile = other.CreateFile.Clone();
          break;
        case DataOneofCase.DeleteFile:
          DeleteFile = other.DeleteFile.Clone();
          break;
        case DataOneofCase.ModifyFile:
          ModifyFile = other.ModifyFile.Clone();
          break;
        case DataOneofCase.SelectFile:
          SelectFile = other.SelectFile.Clone();
          break;
        case DataOneofCase.CursorFile:
          CursorFile = other.CursorFile.Clone();
          break;
        case DataOneofCase.RenameFile:
          RenameFile = other.RenameFile.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransaction Clone() {
      return new TraceTransaction(this);
    }

    /// <summary>Field number for the "type" field.</summary>
    public const int TypeFieldNumber = 1;
    private global::Tracer.TraceTransaction.Types.TraceTransactionType type_ = global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.TraceTransaction.Types.TraceTransactionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    /// <summary>Field number for the "time_offset_ms" field.</summary>
    public const int TimeOffsetMsFieldNumber = 2;
    private uint timeOffsetMs_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint TimeOffsetMs {
      get { return timeOffsetMs_; }
      set {
        timeOffsetMs_ = value;
      }
    }

    /// <summary>Field number for the "file_path" field.</summary>
    public const int FilePathFieldNumber = 3;
    private string filePath_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string FilePath {
      get { return filePath_; }
      set {
        filePath_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "create_file" field.</summary>
    public const int CreateFileFieldNumber = 4;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.CreateFileData CreateFile {
      get { return dataCase_ == DataOneofCase.CreateFile ? (global::Tracer.CreateFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CreateFile;
      }
    }

    /// <summary>Field number for the "delete_file" field.</summary>
    public const int DeleteFileFieldNumber = 5;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.DeleteFileData DeleteFile {
      get { return dataCase_ == DataOneofCase.DeleteFile ? (global::Tracer.DeleteFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.DeleteFile;
      }
    }

    /// <summary>Field number for the "modify_file" field.</summary>
    public const int ModifyFileFieldNumber = 6;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.ModifyFileData ModifyFile {
      get { return dataCase_ == DataOneofCase.ModifyFile ? (global::Tracer.ModifyFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.ModifyFile;
      }
    }

    /// <summary>Field number for the "select_file" field.</summary>
    public const int SelectFileFieldNumber = 7;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.SelectFileData SelectFile {
      get { return dataCase_ == DataOneofCase.SelectFile ? (global::Tracer.SelectFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.SelectFile;
      }
    }

    /// <summary>Field number for the "cursor_file" field.</summary>
    public const int CursorFileFieldNumber = 8;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.CursorChangeFileData CursorFile {
      get { return dataCase_ == DataOneofCase.CursorFile ? (global::Tracer.CursorChangeFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.CursorFile;
      }
    }

    /// <summary>Field number for the "rename_file" field.</summary>
    public const int RenameFileFieldNumber = 9;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Tracer.RenameFileData RenameFile {
      get { return dataCase_ == DataOneofCase.RenameFile ? (global::Tracer.RenameFileData) data_ : null; }
      set {
        data_ = value;
        dataCase_ = value == null ? DataOneofCase.None : DataOneofCase.RenameFile;
      }
    }

    private object data_;
    /// <summary>Enum of possible cases for the "data" oneof.</summary>
    public enum DataOneofCase {
      None = 0,
      CreateFile = 4,
      DeleteFile = 5,
      ModifyFile = 6,
      SelectFile = 7,
      CursorFile = 8,
      RenameFile = 9,
    }
    private DataOneofCase dataCase_ = DataOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public DataOneofCase DataCase {
      get { return dataCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearData() {
      dataCase_ = DataOneofCase.None;
      data_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransaction);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransaction other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Type != other.Type) return false;
      if (TimeOffsetMs != other.TimeOffsetMs) return false;
      if (FilePath != other.FilePath) return false;
      if (!object.Equals(CreateFile, other.CreateFile)) return false;
      if (!object.Equals(DeleteFile, other.DeleteFile)) return false;
      if (!object.Equals(ModifyFile, other.ModifyFile)) return false;
      if (!object.Equals(SelectFile, other.SelectFile)) return false;
      if (!object.Equals(CursorFile, other.CursorFile)) return false;
      if (!object.Equals(RenameFile, other.RenameFile)) return false;
      if (DataCase != other.DataCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) hash ^= Type.GetHashCode();
      if (TimeOffsetMs != 0) hash ^= TimeOffsetMs.GetHashCode();
      if (FilePath.Length != 0) hash ^= FilePath.GetHashCode();
      if (dataCase_ == DataOneofCase.CreateFile) hash ^= CreateFile.GetHashCode();
      if (dataCase_ == DataOneofCase.DeleteFile) hash ^= DeleteFile.GetHashCode();
      if (dataCase_ == DataOneofCase.ModifyFile) hash ^= ModifyFile.GetHashCode();
      if (dataCase_ == DataOneofCase.SelectFile) hash ^= SelectFile.GetHashCode();
      if (dataCase_ == DataOneofCase.CursorFile) hash ^= CursorFile.GetHashCode();
      if (dataCase_ == DataOneofCase.RenameFile) hash ^= RenameFile.GetHashCode();
      hash ^= (int) dataCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (TimeOffsetMs != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(TimeOffsetMs);
      }
      if (FilePath.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FilePath);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        output.WriteRawTag(34);
        output.WriteMessage(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        output.WriteRawTag(42);
        output.WriteMessage(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.ModifyFile) {
        output.WriteRawTag(50);
        output.WriteMessage(ModifyFile);
      }
      if (dataCase_ == DataOneofCase.SelectFile) {
        output.WriteRawTag(58);
        output.WriteMessage(SelectFile);
      }
      if (dataCase_ == DataOneofCase.CursorFile) {
        output.WriteRawTag(66);
        output.WriteMessage(CursorFile);
      }
      if (dataCase_ == DataOneofCase.RenameFile) {
        output.WriteRawTag(74);
        output.WriteMessage(RenameFile);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (TimeOffsetMs != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(TimeOffsetMs);
      }
      if (FilePath.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FilePath);
      }
      if (dataCase_ == DataOneofCase.CreateFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CreateFile);
      }
      if (dataCase_ == DataOneofCase.DeleteFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(DeleteFile);
      }
      if (dataCase_ == DataOneofCase.ModifyFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ModifyFile);
      }
      if (dataCase_ == DataOneofCase.SelectFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelectFile);
      }
      if (dataCase_ == DataOneofCase.CursorFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CursorFile);
      }
      if (dataCase_ == DataOneofCase.RenameFile) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(RenameFile);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransaction other) {
      if (other == null) {
        return;
      }
      if (other.Type != global::Tracer.TraceTransaction.Types.TraceTransactionType.CreateFile) {
        Type = other.Type;
      }
      if (other.TimeOffsetMs != 0) {
        TimeOffsetMs = other.TimeOffsetMs;
      }
      if (other.FilePath.Length != 0) {
        FilePath = other.FilePath;
      }
      switch (other.DataCase) {
        case DataOneofCase.CreateFile:
          if (CreateFile == null) {
            CreateFile = new global::Tracer.CreateFileData();
          }
          CreateFile.MergeFrom(other.CreateFile);
          break;
        case DataOneofCase.DeleteFile:
          if (DeleteFile == null) {
            DeleteFile = new global::Tracer.DeleteFileData();
          }
          DeleteFile.MergeFrom(other.DeleteFile);
          break;
        case DataOneofCase.ModifyFile:
          if (ModifyFile == null) {
            ModifyFile = new global::Tracer.ModifyFileData();
          }
          ModifyFile.MergeFrom(other.ModifyFile);
          break;
        case DataOneofCase.SelectFile:
          if (SelectFile == null) {
            SelectFile = new global::Tracer.SelectFileData();
          }
          SelectFile.MergeFrom(other.SelectFile);
          break;
        case DataOneofCase.CursorFile:
          if (CursorFile == null) {
            CursorFile = new global::Tracer.CursorChangeFileData();
          }
          CursorFile.MergeFrom(other.CursorFile);
          break;
        case DataOneofCase.RenameFile:
          if (RenameFile == null) {
            RenameFile = new global::Tracer.RenameFileData();
          }
          RenameFile.MergeFrom(other.RenameFile);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Type = (global::Tracer.TraceTransaction.Types.TraceTransactionType) input.ReadEnum();
            break;
          }
          case 16: {
            TimeOffsetMs = input.ReadUInt32();
            break;
          }
          case 26: {
            FilePath = input.ReadString();
            break;
          }
          case 34: {
            global::Tracer.CreateFileData subBuilder = new global::Tracer.CreateFileData();
            if (dataCase_ == DataOneofCase.CreateFile) {
              subBuilder.MergeFrom(CreateFile);
            }
            input.ReadMessage(subBuilder);
            CreateFile = subBuilder;
            break;
          }
          case 42: {
            global::Tracer.DeleteFileData subBuilder = new global::Tracer.DeleteFileData();
            if (dataCase_ == DataOneofCase.DeleteFile) {
              subBuilder.MergeFrom(DeleteFile);
            }
            input.ReadMessage(subBuilder);
            DeleteFile = subBuilder;
            break;
          }
          case 50: {
            global::Tracer.ModifyFileData subBuilder = new global::Tracer.ModifyFileData();
            if (dataCase_ == DataOneofCase.ModifyFile) {
              subBuilder.MergeFrom(ModifyFile);
            }
            input.ReadMessage(subBuilder);
            ModifyFile = subBuilder;
            break;
          }
          case 58: {
            global::Tracer.SelectFileData subBuilder = new global::Tracer.SelectFileData();
            if (dataCase_ == DataOneofCase.SelectFile) {
              subBuilder.MergeFrom(SelectFile);
            }
            input.ReadMessage(subBuilder);
            SelectFile = subBuilder;
            break;
          }
          case 66: {
            global::Tracer.CursorChangeFileData subBuilder = new global::Tracer.CursorChangeFileData();
            if (dataCase_ == DataOneofCase.CursorFile) {
              subBuilder.MergeFrom(CursorFile);
            }
            input.ReadMessage(subBuilder);
            CursorFile = subBuilder;
            break;
          }
          case 74: {
            global::Tracer.RenameFileData subBuilder = new global::Tracer.RenameFileData();
            if (dataCase_ == DataOneofCase.RenameFile) {
              subBuilder.MergeFrom(RenameFile);
            }
            input.ReadMessage(subBuilder);
            RenameFile = subBuilder;
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the TraceTransaction message type.</summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static partial class Types {
      public enum TraceTransactionType {
        [pbr::OriginalName("CreateFile")] CreateFile = 0,
        [pbr::OriginalName("DeleteFile")] DeleteFile = 1,
        [pbr::OriginalName("ModifyFile")] ModifyFile = 2,
        [pbr::OriginalName("SelectFile")] SelectFile = 3,
        [pbr::OriginalName("CursorFile")] CursorFile = 4,
        [pbr::OriginalName("RenameFile")] RenameFile = 5,
      }

    }
    #endregion

  }

  public sealed partial class TraceTransactionLog : pb::IMessage<TraceTransactionLog> {
    private static readonly pb::MessageParser<TraceTransactionLog> _parser = new pb::MessageParser<TraceTransactionLog>(() => new TraceTransactionLog());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceTransactionLog> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[7]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog(TraceTransactionLog other) : this() {
      partition_ = other.partition_;
      transactions_ = other.transactions_.Clone();
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceTransactionLog Clone() {
      return new TraceTransactionLog(this);
    }

    /// <summary>Field number for the "partition" field.</summary>
    public const int PartitionFieldNumber = 1;
    private uint partition_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Partition {
      get { return partition_; }
      set {
        partition_ = value;
      }
    }

    /// <summary>Field number for the "transactions" field.</summary>
    public const int TransactionsFieldNumber = 2;
    private static readonly pb::FieldCodec<global::Tracer.TraceTransaction> _repeated_transactions_codec
        = pb::FieldCodec.ForMessage(18, global::Tracer.TraceTransaction.Parser);
    private readonly pbc::RepeatedField<global::Tracer.TraceTransaction> transactions_ = new pbc::RepeatedField<global::Tracer.TraceTransaction>();
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public pbc::RepeatedField<global::Tracer.TraceTransaction> Transactions {
      get { return transactions_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceTransactionLog);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceTransactionLog other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Partition != other.Partition) return false;
      if(!transactions_.Equals(other.transactions_)) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Partition != 0) hash ^= Partition.GetHashCode();
      hash ^= transactions_.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Partition != 0) {
        output.WriteRawTag(8);
        output.WriteUInt32(Partition);
      }
      transactions_.WriteTo(output, _repeated_transactions_codec);
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Partition != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Partition);
      }
      size += transactions_.CalculateSize(_repeated_transactions_codec);
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceTransactionLog other) {
      if (other == null) {
        return;
      }
      if (other.Partition != 0) {
        Partition = other.Partition;
      }
      transactions_.Add(other.transactions_);
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            Partition = input.ReadUInt32();
            break;
          }
          case 18: {
            transactions_.AddEntriesFrom(input, _repeated_transactions_codec);
            break;
          }
        }
      }
    }

  }

  public sealed partial class TraceProject : pb::IMessage<TraceProject> {
    private static readonly pb::MessageParser<TraceProject> _parser = new pb::MessageParser<TraceProject>(() => new TraceProject());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<TraceProject> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Tracer.TracerReflection.Descriptor.MessageTypes[8]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject(TraceProject other) : this() {
      id_ = other.id_;
      duration_ = other.duration_;
      partitionSize_ = other.partitionSize_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public TraceProject Clone() {
      return new TraceProject(this);
    }

    /// <summary>Field number for the "id" field.</summary>
    public const int IdFieldNumber = 1;
    private string id_ = "";
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string Id {
      get { return id_; }
      set {
        id_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    /// <summary>Field number for the "duration" field.</summary>
    public const int DurationFieldNumber = 2;
    private uint duration_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint Duration {
      get { return duration_; }
      set {
        duration_ = value;
      }
    }

    /// <summary>Field number for the "partition_size" field.</summary>
    public const int PartitionSizeFieldNumber = 3;
    private uint partitionSize_;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public uint PartitionSize {
      get { return partitionSize_; }
      set {
        partitionSize_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as TraceProject);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(TraceProject other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Id != other.Id) return false;
      if (Duration != other.Duration) return false;
      if (PartitionSize != other.PartitionSize) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Id.Length != 0) hash ^= Id.GetHashCode();
      if (Duration != 0) hash ^= Duration.GetHashCode();
      if (PartitionSize != 0) hash ^= PartitionSize.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Id.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Id);
      }
      if (Duration != 0) {
        output.WriteRawTag(16);
        output.WriteUInt32(Duration);
      }
      if (PartitionSize != 0) {
        output.WriteRawTag(24);
        output.WriteUInt32(PartitionSize);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Id.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Id);
      }
      if (Duration != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Duration);
      }
      if (PartitionSize != 0) {
        size += 1 + pb::CodedOutputStream.ComputeUInt32Size(PartitionSize);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(TraceProject other) {
      if (other == null) {
        return;
      }
      if (other.Id.Length != 0) {
        Id = other.Id;
      }
      if (other.Duration != 0) {
        Duration = other.Duration;
      }
      if (other.PartitionSize != 0) {
        PartitionSize = other.PartitionSize;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            Id = input.ReadString();
            break;
          }
          case 16: {
            Duration = input.ReadUInt32();
            break;
          }
          case 24: {
            PartitionSize = input.ReadUInt32();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
